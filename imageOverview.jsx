﻿// imageOverview.jsx// this script places the content of the selected folder onto a page//// THIS STILL HAS SOME BUGS!!!//// based on InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// and theImageGrid.jsx by fabiantheblind// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/var DEBUG = false; // this is for debuggingmain();// everything happens in here// you need a function to cancel a scriptfunction main(){	// define the folder and the filetype	var theFolder = Folder.selectDialog ("Choose the FOLDER to import \".tif\" images from");     // if the user cancels the folder dialog     // cancel the script    if(!theFolder){        return;// this cancels the whole function main()        }	var theFileType = "*.tif";// only use tif files could also be jpg    // get all images into an array	var allImages = theFolder.getFiles(theFileType);    //define the sizes and the distance between the images    // this should work with the sizes of the images    // but right now i am using 1280 x 720 px images    // so 64 x 36 is also 16:9      var columns = 8; // how many columns    var imgW = 64; // the image width this needs improvement    var imgH = 36; // the image height this also needs improvement    var gutter = 10; // the distance between the images    var step = 3; // the step for selecting the images        // these are the margins    var lft = 13;    var rght = 13;    var tp = 13;    var bttm = 23;        // now calculate the number of rows    var rows = Math.floor((allImages.length / step) / columns) ;	var d = app.documents.add(); //build a basic document        // now calc the size of the doc depending on the colums and rows    // the number of columns times the image width plus the gutter times the columns minus one column    // than add the left and the right    // same thing for the height with the rows and the top and the bottom	d.documentPreferences.properties = {		pageWidth : (imgW * columns) + (( gutter*(columns-1)) + lft + rght),		pageHeight : (imgH * rows) + ((gutter * (rows-1)) + tp + bttm),        facingPages:false	};var pw = d.documentPreferences.pageWidth; // for better handlingvar ph = d.documentPreferences.pageHeight;// for better handling    // set the masterpages    // edit the margins and columns    var msp1 = d.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {        right:rght,        top:tp,        left:lft,        bottom:bttm,        columnGutter:gutter,        columnCount:columns    };          var msp2 =d.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {        right:rght,        top:tp,        left:lft,        bottom:bttm,        columnGutter:gutter,        columnCount:columns    };  var p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread            var i = 0; // for counting images    var count = 0; // for counting image frames    if(DEBUG==true)$.writeln (allImages.length);// this is just debug    var rects  = new Array();// an array for the retangles    for(var y1 = tp; y1 < ph - bttm; y1 += imgH+ gutter){        for(var x1 = lft; x1 < pw- rght; x1 += imgW + gutter){            // now push the rect to the array            rects.push(                    p.rectangles.add({                        geometricBounds: [y1,x1,y1 + imgH,x1 + imgW]                                    })                      );                                  rects[count].place(allImages[i]); // place the image into the rectangle            rects[count].fit(FitOptions.CONTENT_TO_FRAME); // fit it to the frame            rects[count].strokeWeight = 0;// dont want a stroke                        if(DEBUG==true) $.writeln(i); // this is for debug                        i+=step;// now get the next image            count++;// a index for next rectangles                        // at some point we have to stop the loop            //to not exeed the number of images we have            if(i > allImages.length ){                break;                }            } // close for loop x1         if(i > allImages.length  ){          break;          }        }// close for loop y1}// close main function﻿// imageOverview.jsx// this script places the content of the selected folder// onto a page// based on InsertMultipleImages.js by Brian Reyman// http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&extid=1046817// https://raw.github.com/fabiantheblind/theGrids/master/imageGrid/theImageGrid.jsx// Copyright (C) 2011 Fabian "fabiantheblind" Morón Zirfas// http://www.the-moron.net// http://fabiantheblind.info/// info [at] the - moron . net// This program is free software: you can redistribute it and/or modify// it under the terms of the GNU General Public License as published by// the Free Software Foundation, either version 3 of the License, or// any later version.// This program is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.// You should have received a copy of the GNU General Public License// along with this program.  If not, see http://www.gnu.org/licenses/  var DEBUG = false;main();function main(){	// define the folder the path the filetype	var theFolder = Folder.selectDialog ("Choose the FOLDER to import \".tif\" images from");     // if the user cancels the folder dialog     // cancel the script    if(!theFolder){        return;        }	var thePath = theFolder;	var theFileType = "*.tif";	var allImages = thePath.getFiles(theFileType);    //define the sizes and the distance between the images    // this should work with the sizes of the images    // but right now i am using 1280 x 720 px images    // so 64 x 36 is also 16:9      var columns = 10; // how many columns    var imgW = 64; // the image width this needs improvement    var imgH = 36; // the image height this also needs improvement    var gutter = 10; // the distance between the images    var step = 1; // the step for selecting the images        // these are the margins    var lft = 13;    var rght = 13;    var tp = 13;    var bttm = 13;        // now calculate the number of rows    var rows = Math.floor((allImages.length / step) / columns) ;	var d = app.documents.add(); //build a basic document        // now calc the size of the doc depending on the colums and rows    // the number of columns times the image width plus the gutter times the columns minus one    // than add the left and the right    // same thing for the height with the rows and the top and the bottom	d.documentPreferences.properties = {		pageWidth : (imgW * columns) + (( gutter*(columns-1)) + lft + rght),		pageHeight : (imgH * rows) + ((gutter * (rows-1)) + tp + bttm),        facingPages:false	};var pw = d.documentPreferences.pageWidth; // for better handlingvar ph = d.documentPreferences.pageHeight;// for better handling    // set the masterpages    var msp1 = d.masterSpreads.item(0).pages.item(0);// edit the masterspreads	msp1.marginPreferences.properties = {        right:rght,        top:tp,        left:lft,        bottom:bttm,        columnGutter:gutter,        columnCount:columns    };          var msp2 =d.masterSpreads.item(0).pages.item(1);//edit the other masterspred	msp2.marginPreferences.properties = {        right:rght,        top:tp,        left:lft,        bottom:bttm,        columnGutter:gutter,        columnCount:columns    };  var p = d.pages.item(0);// finally - get the first page    p.appliedMaster = d.masterSpreads.item(0);// apply the masterspread            var i = 0; // for counting images    var count = 0; // for counting image frames    if(DEBUG==true)$.writeln (allImages.length);// this is just debug    var rects  = new Array();// a box for the retangles    for(var y1 = tp; y1 < ph - bttm; y1 += imgH+ gutter){        for(var x1 = lft; x1 < pw- rght; x1 += imgW + gutter){            // now push the rect to the box            rects.push(                    p.rectangles.add({                        geometricBounds: [y1,x1,y1 + imgH,x1 + imgW]                                    })                      );                      			rects[count].place(allImages[i]); // place the image into the rectangle			rects[count].fit(FitOptions.CONTENT_TO_FRAME); // fit it to the frame            rects[count].strokeWeight = 0;// dont want a stroke            if(DEBUG==true) $.writeln(i); // this is for debug            i+=step;// now get the next image            count++;// counter for the rectangles                        // at some point we have to stop the loop            //to not exeed the number of images we have            if(i > allImages.length ){                break;                }            } // close for x1         if(i > allImages.length  ){          break;          }        }// close for y1}// done